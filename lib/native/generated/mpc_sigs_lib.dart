// ignore_for_file: camel_case_types, non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to mpc-sigs C API
class MpcSigsLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MpcSigsLib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MpcSigsLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ProtoWrapper> protocol_new(
    int alg,
  ) {
    return _protocol_new(
      alg,
    );
  }

  late final _protocol_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ProtoWrapper> Function(ffi.Int32)>>(
      'protocol_new');
  late final _protocol_new =
      _protocol_newPtr.asFunction<ffi.Pointer<ProtoWrapper> Function(int)>();

  Buffer protocol_update(
    ffi.Pointer<ProtoWrapper> proto,
    ffi.Pointer<ffi.Uint8> data,
    int len,
  ) {
    return _protocol_update(
      proto,
      data,
      len,
    );
  }

  late final _protocol_updatePtr = _lookup<
      ffi.NativeFunction<
          Buffer Function(ffi.Pointer<ProtoWrapper>, ffi.Pointer<ffi.Uint8>,
              uintptr_t)>>('protocol_update');
  late final _protocol_update = _protocol_updatePtr.asFunction<
      Buffer Function(
          ffi.Pointer<ProtoWrapper>, ffi.Pointer<ffi.Uint8>, int)>();

  Buffer protocol_result(
    ffi.Pointer<ProtoWrapper> proto,
  ) {
    return _protocol_result(
      proto,
    );
  }

  late final _protocol_resultPtr =
      _lookup<ffi.NativeFunction<Buffer Function(ffi.Pointer<ProtoWrapper>)>>(
          'protocol_result');
  late final _protocol_result = _protocol_resultPtr
      .asFunction<Buffer Function(ffi.Pointer<ProtoWrapper>)>();

  ffi.Pointer<ffi.Int8> protocol_error(
    ffi.Pointer<ProtoWrapper> proto,
  ) {
    return _protocol_error(
      proto,
    );
  }

  late final _protocol_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ProtoWrapper>)>>('protocol_error');
  late final _protocol_error = _protocol_errorPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ProtoWrapper>)>();

  void protocol_free(
    ffi.Pointer<ProtoWrapper> proto,
  ) {
    return _protocol_free(
      proto,
    );
  }

  late final _protocol_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ProtoWrapper>)>>(
          'protocol_free');
  late final _protocol_free =
      _protocol_freePtr.asFunction<void Function(ffi.Pointer<ProtoWrapper>)>();

  ffi.Pointer<ProtoWrapper> group_sign(
    int alg,
    ffi.Pointer<ffi.Uint8> group_data,
    int len,
  ) {
    return _group_sign(
      alg,
      group_data,
      len,
    );
  }

  late final _group_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ProtoWrapper> Function(
              ffi.Int32, ffi.Pointer<ffi.Uint8>, uintptr_t)>>('group_sign');
  late final _group_sign = _group_signPtr.asFunction<
      ffi.Pointer<ProtoWrapper> Function(int, ffi.Pointer<ffi.Uint8>, int)>();
}

abstract class Algorithm {
  static const int Gg18 = 0;
}

class ProtoWrapper extends ffi.Opaque {}

class Buffer extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @uintptr_t()
  external int len;
}

typedef uintptr_t = ffi.Uint64;
