// ignore_for_file: camel_case_types, non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to mpc-sigs C API
class MpcSigsLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MpcSigsLib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MpcSigsLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<CertKey> cert_key_new() {
    return _cert_key_new();
  }

  late final _cert_key_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CertKey> Function()>>(
          'cert_key_new');
  late final _cert_key_new =
      _cert_key_newPtr.asFunction<ffi.Pointer<CertKey> Function()>();

  void cert_key_free(
    ffi.Pointer<CertKey> p,
  ) {
    return _cert_key_free(
      p,
    );
  }

  late final _cert_key_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CertKey>)>>(
          'cert_key_free');
  late final _cert_key_free =
      _cert_key_freePtr.asFunction<void Function(ffi.Pointer<CertKey>)>();

  ffi.Pointer<ffi.Void> cert_key_get_key(
    ffi.Pointer<CertKey> p,
  ) {
    return _cert_key_get_key(
      p,
    );
  }

  late final _cert_key_get_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CertKey>)>>('cert_key_get_key');
  late final _cert_key_get_key = _cert_key_get_keyPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<CertKey>)>();

  ffi.Pointer<ffi.Void> cert_key_get_cert(
    ffi.Pointer<CertKey> p,
  ) {
    return _cert_key_get_cert(
      p,
    );
  }

  late final _cert_key_get_certPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CertKey>)>>('cert_key_get_cert');
  late final _cert_key_get_cert = _cert_key_get_certPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<CertKey>)>();
}

class CertKey extends ffi.Opaque {}
