// ignore_for_file: camel_case_types, non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to mpc-sigs C API
class MpcSigsLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MpcSigsLib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MpcSigsLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void error_free(
    ffi.Pointer<ffi.Char> error,
  ) {
    return _error_free(
      error,
    );
  }

  late final _error_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'error_free');
  late final _error_free =
      _error_freePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void protocol_result_free(
    ProtocolResult res,
  ) {
    return _protocol_result_free(
      res,
    );
  }

  late final _protocol_result_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ProtocolResult)>>(
          'protocol_result_free');
  late final _protocol_result_free =
      _protocol_result_freePtr.asFunction<void Function(ProtocolResult)>();

  ProtocolResult protocol_keygen(
    int proto_id,
  ) {
    return _protocol_keygen(
      proto_id,
    );
  }

  late final _protocol_keygenPtr =
      _lookup<ffi.NativeFunction<ProtocolResult Function(ffi.Int32)>>(
          'protocol_keygen');
  late final _protocol_keygen =
      _protocol_keygenPtr.asFunction<ProtocolResult Function(int)>();

  ProtocolResult protocol_advance(
    ffi.Pointer<ffi.Uint8> ctx_ptr,
    int ctx_len,
    ffi.Pointer<ffi.Uint8> data_ptr,
    int data_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_out,
  ) {
    return _protocol_advance(
      ctx_ptr,
      ctx_len,
      data_ptr,
      data_len,
      error_out,
    );
  }

  late final _protocol_advancePtr = _lookup<
      ffi.NativeFunction<
          ProtocolResult Function(
              ffi.Pointer<ffi.Uint8>,
              uintptr_t,
              ffi.Pointer<ffi.Uint8>,
              uintptr_t,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('protocol_advance');
  late final _protocol_advance = _protocol_advancePtr.asFunction<
      ProtocolResult Function(ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ProtocolResult protocol_finish(
    ffi.Pointer<ffi.Uint8> ctx_ptr,
    int ctx_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_out,
  ) {
    return _protocol_finish(
      ctx_ptr,
      ctx_len,
      error_out,
    );
  }

  late final _protocol_finishPtr = _lookup<
      ffi.NativeFunction<
          ProtocolResult Function(ffi.Pointer<ffi.Uint8>, uintptr_t,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('protocol_finish');
  late final _protocol_finish = _protocol_finishPtr.asFunction<
      ProtocolResult Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ProtocolResult protocol_sign(
    int proto_id,
    ffi.Pointer<ffi.Uint8> group_ptr,
    int group_len,
  ) {
    return _protocol_sign(
      proto_id,
      group_ptr,
      group_len,
    );
  }

  late final _protocol_signPtr = _lookup<
      ffi.NativeFunction<
          ProtocolResult Function(
              ffi.Int32, ffi.Pointer<ffi.Uint8>, uintptr_t)>>('protocol_sign');
  late final _protocol_sign = _protocol_signPtr
      .asFunction<ProtocolResult Function(int, ffi.Pointer<ffi.Uint8>, int)>();
}

abstract class ProtocolId {
  static const int Gg18 = 0;
}

class Buffer extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @uintptr_t()
  external int len;

  @uintptr_t()
  external int capacity;
}

typedef uintptr_t = ffi.UnsignedLong;

class ProtocolResult extends ffi.Struct {
  external Buffer context;

  external Buffer data;
}
