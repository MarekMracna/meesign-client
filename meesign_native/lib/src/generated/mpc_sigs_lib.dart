// ignore_for_file: camel_case_types, non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to mpc-sigs C API
class MpcSigsLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MpcSigsLib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MpcSigsLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Int> keygen(
    int proto_id,
  ) {
    return _keygen(
      proto_id,
    );
  }

  late final _keygenPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Int32)>>(
          'keygen');
  late final _keygen =
      _keygenPtr.asFunction<ffi.Pointer<ffi.Int> Function(int)>();

  ffi.Pointer<ffi.Int> protocol_advance(
    ffi.Pointer<ffi.Uint8> ctx_ptr,
    int ctx_len,
    ffi.Pointer<ffi.Uint8> data_ptr,
    int data_len,
  ) {
    return _protocol_advance(
      ctx_ptr,
      ctx_len,
      data_ptr,
      data_len,
    );
  }

  late final _protocol_advancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Uint8>, uintptr_t,
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('protocol_advance');
  late final _protocol_advance = _protocol_advancePtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ffi.Int> protocol_finish(
    ffi.Pointer<ffi.Uint8> ctx_ptr,
    int ctx_len,
  ) {
    return _protocol_finish(
      ctx_ptr,
      ctx_len,
    );
  }

  late final _protocol_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Uint8>, uintptr_t)>>('protocol_finish');
  late final _protocol_finish = _protocol_finishPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Uint8>, int)>();

  Buffer result_context(
    ffi.Pointer<ffi.Int> res_ptr,
  ) {
    return _result_context(
      res_ptr,
    );
  }

  late final _result_contextPtr =
      _lookup<ffi.NativeFunction<Buffer Function(ffi.Pointer<ffi.Int>)>>(
          'result_context');
  late final _result_context =
      _result_contextPtr.asFunction<Buffer Function(ffi.Pointer<ffi.Int>)>();

  Buffer result_data(
    ffi.Pointer<ffi.Int> res_ptr,
  ) {
    return _result_data(
      res_ptr,
    );
  }

  late final _result_dataPtr =
      _lookup<ffi.NativeFunction<Buffer Function(ffi.Pointer<ffi.Int>)>>(
          'result_data');
  late final _result_data =
      _result_dataPtr.asFunction<Buffer Function(ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> result_error(
    ffi.Pointer<ffi.Int> res_ptr,
  ) {
    return _result_error(
      res_ptr,
    );
  }

  late final _result_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>)>>('result_error');
  late final _result_error = _result_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Int>)>();

  void result_free(
    ffi.Pointer<ffi.Int> res,
  ) {
    return _result_free(
      res,
    );
  }

  late final _result_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'result_free');
  late final _result_free =
      _result_freePtr.asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Int> sign(
    int proto_id,
    ffi.Pointer<ffi.Uint8> group_ptr,
    int group_len,
  ) {
    return _sign(
      proto_id,
      group_ptr,
      group_len,
    );
  }

  late final _signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Int32, ffi.Pointer<ffi.Uint8>, uintptr_t)>>('sign');
  late final _sign = _signPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(int, ffi.Pointer<ffi.Uint8>, int)>();
}

abstract class ProtocolId {
  static const int Gg18 = 0;
}

class Buffer extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @uintptr_t()
  external int len;
}

typedef uintptr_t = ffi.UnsignedLong;
